// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace EWS.Web.Controllers
{
    public partial class QuoteController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected QuoteController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ChooseMode()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChooseMode);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EquipmentCalculation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EquipmentCalculation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Quote()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Quote);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public QuoteController Actions { get { return MVC.Quote; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Quote";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Quote";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string ChooseMode = "ChooseMode";
            public readonly string NewQuote = "NewQuote";
            public readonly string EquipmentCalculation = "EquipmentCalculation";
            public readonly string Quote = "Quote";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string ChooseMode = "ChooseMode";
            public const string NewQuote = "NewQuote";
            public const string EquipmentCalculation = "EquipmentCalculation";
            public const string Quote = "Quote";
        }


        static readonly ActionParamsClass_ChooseMode s_params_ChooseMode = new ActionParamsClass_ChooseMode();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChooseMode ChooseModeParams { get { return s_params_ChooseMode; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChooseMode
        {
            public readonly string Method = "Method";
        }
        static readonly ActionParamsClass_NewQuote s_params_NewQuote = new ActionParamsClass_NewQuote();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_NewQuote NewQuoteParams { get { return s_params_NewQuote; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_NewQuote
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_EquipmentCalculation s_params_EquipmentCalculation = new ActionParamsClass_EquipmentCalculation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EquipmentCalculation EquipmentCalculationParams { get { return s_params_EquipmentCalculation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EquipmentCalculation
        {
            public readonly string QuoteRef = "QuoteRef";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_Quote s_params_Quote = new ActionParamsClass_Quote();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Quote QuoteParams { get { return s_params_Quote; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Quote
        {
            public readonly string QuoteID = "QuoteID";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string ChooseMode = "ChooseMode";
                public readonly string EquipmentCalculation = "EquipmentCalculation";
                public readonly string NewContractForm = "NewContractForm";
                public readonly string NewQuote = "NewQuote";
            }
            public readonly string ChooseMode = "~/Views/Quote/ChooseMode.cshtml";
            public readonly string EquipmentCalculation = "~/Views/Quote/EquipmentCalculation.cshtml";
            public readonly string NewContractForm = "~/Views/Quote/NewContractForm.cshtml";
            public readonly string NewQuote = "~/Views/Quote/NewQuote.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_QuoteController : EWS.Web.Controllers.QuoteController
    {
        public T4MVC_QuoteController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ChooseModeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Method);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChooseMode(string Method)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChooseMode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Method", Method);
            ChooseModeOverride(callInfo, Method);
            return callInfo;
        }

        [NonAction]
        partial void NewQuoteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult NewQuote()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NewQuote);
            NewQuoteOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void NewQuoteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, EWS.Web.Models.QuoteStart_Model model);

        [NonAction]
        public override System.Web.Mvc.ActionResult NewQuote(EWS.Web.Models.QuoteStart_Model model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NewQuote);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            NewQuoteOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void EquipmentCalculationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string QuoteRef);

        [NonAction]
        public override System.Web.Mvc.ActionResult EquipmentCalculation(string QuoteRef)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EquipmentCalculation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "QuoteRef", QuoteRef);
            EquipmentCalculationOverride(callInfo, QuoteRef);
            return callInfo;
        }

        [NonAction]
        partial void EquipmentCalculationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, EWS.Domain.Model.EquipmentQuoteStep1 model);

        [NonAction]
        public override System.Web.Mvc.ActionResult EquipmentCalculation(EWS.Domain.Model.EquipmentQuoteStep1 model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EquipmentCalculation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            EquipmentCalculationOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void QuoteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int QuoteID);

        [NonAction]
        public override System.Web.Mvc.ActionResult Quote(int QuoteID)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Quote);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "QuoteID", QuoteID);
            QuoteOverride(callInfo, QuoteID);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
