<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
}
#>
<div class="container-fluid">
	@Html.Partial("ValidationSummary", ViewData.ModelState)
    <h2>Add new <#= ViewName#></h2>
    <div class="pull-right bottom-gap-10">
        <a href="@Url.Action("Index")" class="btn btn-default throbber"><span class="glyphicon glyphicon-backward"></span>&nbsp;Back to List</a>
    </div>
    <div class="row">
        <div class="col-xs-12 bottom-gap-20">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title"><#= ViewName#></h3>
                </div>
                <div class="panel-body">
@using (Html.BeginForm()) 
{
				    <div class="form-horizontal">
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }

#>
						<div class="form-group">
<#
        if (property.IsForeignKey) {
#>
				            @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
        } else {
#>
				            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        }
#>
							<div class="col-sm-6  col-md-5 col-lg-4">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
            if (isControlHtmlAttributesSupported) {
#>
								@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
								@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
				                <div class="checkbox">
<#
                PushIndent("    ");
#>
					                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
									@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
            } 
        } else {
#>
									@Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
				                </div>
<#
        }
#>
							</div>
							<div class="col-sm-4 col-md-5 col-lg-6"></div>
						</div>
<#
    }
}
#>
						<div class="form-group">
							<div class="col-md-offset-2 col-md-10">
								<button type="submit" value="Create" class="btn btn-primary throbber">
									<span class="glyphicon glyphicon-floppy-disk"></span>&nbsp;Create
								</button> 
								<a href="@Url.Action("Index")" class="btn btn-default throbber"><span class="glyphicon glyphicon-list" aria-hidden="true"></span>&nbsp;Back to List</a>
							</div>
						</div>
					</div>
}
				</div>
            </div>
        </div>
    </div>
</div>
<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>